
## RSB Development TODO

### COMPLETED âœ…
- âœ… **RSB Test Modernization**: ALL 10 modules now have modern sanity tests
- âœ… **API Modernization**: Fixed all compilation errors, 61+ working tests
- âœ… **Test Infrastructure**: Complete orchestrator system functional

#### RSB v2.0 Enhancement Suite Phase 1 âœ… COMPLETE
- âœ… **Object<T> Module**: Generic configuration object with Index trait [10 SP]
- âœ… **Clear Globals**: Global store cleanup with protected keys [5 SP]
- âœ… **CLI Args to Global**: Bootstrap integration with 1-based indexing [5 SP]
- âœ… **Options Cleanup**: OptionsStrategy enum with Default/Sort/Remove strategies [10 SP]
  - âœ… Create OptionsStrategy enum (Default/Sort/Remove) [2 SP]
  - âœ… Implement apply_options_strategy() method [3 SP]
  - âœ… Add flag boundary validation [2 SP]
  - âœ… Load strategy from RSB config (RSB_OPTIONS_MODE/rsb_options_mode) [2 SP]
  - âœ… Maintain backward compatibility [1 SP]
- âœ… **Flag Commands**: Flag command detection system with --version and --help handlers [10 SP]
  - âœ… Create FlagCommand struct and registry [3 SP]
  - âœ… Implement execute_flag_commands() [3 SP]
  - âœ… Add default --version and --help handlers [2 SP]
  - âœ… Integrate with dispatch! macro [2 SP]

### IN PROGRESS - RSB v2.0 Enhancement Suite Phase 2 ðŸ”„

#### PRIORITY 1: ACTIVE IMPLEMENTATION

#### RECENTLY COMPLETED âœ…

**TASK 2.2: TOML Snooping** [15 SP] âœ… COMPLETE
- âœ… Create src/toml/mod.rs module with TomlSnooper [3 SP]
- âœ… Extract [package.metadata.rsb/hub/inf] sections [4 SP]
- âœ… Store namespace values with snake_case conversion [3 SP]
- âœ… Handle arrays using RSB convention (LENGTH + indexed) [2 SP]
- âœ… Integrate with bootstrap! macro variants [3 SP]
- âœ… Fix stale global values bug (key tracking cleanup) [BONUS]

#### PRIORITY 2: UPCOMING STAKEHOLDER FEATURES (Phase 3)

**TASK 3.1: REPL Support** [29 SP] - See docs/proposals/REPL_STRATEGY.md

**Phase 0: Module Setup** [1 SP]
- [x] REPL-00: Module Structure Setup [1 SP] âœ…
  - Create src/repl/ directory with proper module structure
  - Create src/repl/mod.rs (orchestrator and re-exports)
  - Create src/repl/parser.rs stub (ReplParser trait)
  - Create src/repl/macros.rs stub
  - Create src/repl/helpers.rs stub (store_repl_args_global)
  - Add repl module to src/lib.rs
  - Add repl to prelude (repl_arg!, repl_dispatch! etc)
  - Create tests/sanity/repl.rs orchestrator
  - Create tests/uat/repl.rs orchestrator
  - Follow MODULE_SPEC v3 (docs/tech/development/MODULE_SPEC.md)

**Phase 1: Core Infrastructure** [12 SP]
- [x] REPL-01: Core Repl Struct and Read Loop [4 SP] âœ…
  - Create src/repl/mod.rs module
  - Implement Repl struct (prompt, history fields)
  - Implement read_line() with stdin
  - Implement new() and with_prompt() constructors
  - Prompt configuration: rsb_repl_prompt â†’ RSB_REPL_PROMPT â†’ default "repl> "
  - Implement set_prompt() for dynamic updates
  - Add Repl to prelude exports
  - Add sanity tests for Repl struct
- [x] REPL-02: Command Tokenization & Parser Trait [4 SP] âœ…
  - Create src/repl/parser.rs module
  - Define ReplParser trait (Send + Sync)
  - Implement SimpleParser: quote-aware, pattern detection (tokens, comma lists, semicolon streams)
  - Implement Args::from_line() using SimpleParser
  - Implement Repl::with_parser() for pluggable parsers
  - 22 comprehensive sanity tests
  - China validation: 85% confidence
- [x] REPL-03: Global Storage Integration [2 SP] âœ… (Already complete from REPL-00)
  - Implement store_repl_args_global() function
  - Store repl_arg_0..N, repl_argc, repl_args (0-indexed)
  - Integration with existing global store
- [x] REPL-04: Built-in Commands [2 SP] âœ…
  - Implement dispatch_builtin() method
  - exit/quit, clear, history, help commands
  - ReplResult enum (Exit, Continue, Command, Error)
  - 7 sanity tests for built-in commands

**Phase 2: Macro System** [4 SP]
- [x] REPL-05: REPL Argument Macros [2 SP] âœ…
  - Create src/repl/macros.rs
  - Implement repl_arg!($n), repl_argc!(), repl_args!(), repl_argv!()
  - Export in prelude
  - 5 sanity tests for macros
- [x] REPL-06: repl_dispatch! Macro [2 SP] âœ…
  - Implement repl_dispatch! macro with command matching
  - Error handling integration
  - Built-in command detection
  - Read loop with history tracking
  - Unknown command handling

**Phase 3: Integration & Error Handling** [4 SP]
- [x] REPL-07: ReplResult Enum & Error Handling [2 SP] âœ… (Already complete from REPL-04)
  - ReplResult enum with Exit/Continue/Command/Error variants
  - Non-fatal error catching in dispatch loop (repl_dispatch! macro)
  - Handler Result<i32, String> support with automatic error printing
  - Panic propagation (panics bubble up naturally)
- [x] REPL-08: dispatch! Integration [2 SP] âœ…
  - Created FEATURES_REPL.md with comprehensive documentation
  - Created examples/repl_demo.rs with full integration example
  - Documented all integration patterns and usage

**Phase 4: Testing** [5 SP]
- [ ] REPL-09: Sanity Tests [2 SP]
  - Test Args::from_line() tokenization
  - Test pattern preservation (tokens, lists, streams)
  - Test global storage (repl_arg_*)
  - Test built-in commands
  - Test ReplParser trait
- [ ] REPL-10: UAT Tests [3 SP]
  - Test full REPL loop
  - Test dynamic prompts
  - Test error handling
  - Test integration with dispatch!

**Phase 5: Documentation** [3 SP]
- [ ] REPL-11: Documentation [3 SP]
  - Create docs/FEATURES_REPL.md
  - Update docs/HOWTO.md with REPL patterns
  - Module docs, macro usage, integration patterns

#### PRIORITY 2: OPPORTUNISTIC/BACKLOG

**Object Module QOL Improvements** [NEW]
- [ ] QOL-01: Fix key normalization - CamelCase should convert to snake_case [3 SP]
  - Currently: "CamelCase" â†’ "camelcase" (wrong!)
  - Should be: "CamelCase" â†’ "camel_case" (proper snake_case)
- [ ] QOL-02: Export Object macros in prelude::macros [1 SP]
  - hub_config!, inf_config!, rsb_config! macros not re-exported
  - hub_object!, inf_object!, rsb_object! macros not re-exported
- [ ] QOL-03: Add additional Shape phantom types & fix RSB capitalization [2 SP]
  - Fix: Rename `RsbShape` â†’ `RSBShape` (proper capitalization)
  - Fix: Update `RsbConfig` â†’ `RSBConfig` type alias
  - Add `pub struct GenericShape;` for general-purpose Objects
  - Add `pub struct JSONShape;` for JSON-style data structures
  - Add `pub struct MeteorShape;` for Meteor data type representations
  - Add type aliases:
    - `GenericObject = Object<GenericShape>`
    - `JSONObject = Object<JSONShape>`
    - `MeteorObject = Object<MeteorShape>`
- [ ] QOL-04: Add Object::merge() for combining Objects [3 SP]
- [ ] QOL-05: Add Object::from_map() constructor [2 SP]
- [ ] QOL-06: Document Shape pattern philosophy in FEATURES_OBJECT.md [1 SP]
  - Clarify that Shapes are phantom types for compile-time hints only
  - Add examples showing type documentation without runtime cost
- [ ] QOL-07: Add Object iteration helpers [3 SP]
  - Add `iter()` method returning iterator over (key, value) pairs
  - Add `filter_prefix(prefix)` to get subset of keys with prefix
  - Add `to_vec()` for sorted key-value pairs
- [ ] QOL-08: Add Object display/debug improvements [2 SP]
  - Implement Display trait for pretty printing
  - Format: `ObjectNamespace { key1: "value1", key2: "value2" }`
  - Add `dump()` method for debug output with namespace info
- [ ] QOL-09: Add Object validation helpers [3 SP]
  - Add `require(key)` that returns Result instead of empty string
  - Add `require_all(&[keys])` for batch validation
  - Add `is_empty()` and `len()` methods
- [ ] QOL-10: Fix InfShape capitalization consistency [1 SP]
  - Consider: Should `InfShape` be `INFShape` for consistency with RSBShape?
  - Or keep as InfShape since "Inf" is short for "Infrastructure"?
  - Document the naming convention decision
- [ ] QOL-11: Add ObjectLike trait with translation layer [6 SP]
  - Define trait with core Object methods (get, set, has, keys, namespace)
  - Add translation methods:
    - `to_object(&self) -> Object` - convert any ObjectLike to Object
    - `from_object(obj: &Object) -> Self` - construct from Object
  - Implement for Object<T> and common types
  - Enable powerful patterns:
    - Mock objects for testing
    - Adapters for HashMap, BTreeMap, serde_json::Value
    - Blanket impls for conversions (From/Into)
    - Dynamic dispatch via Box<dyn ObjectLike>
  - Translation layer examples:
    - `config.to_object()` - any config type â†’ Object
    - `HashMap::from_object(&obj)` - Object â†’ HashMap
    - Chain translations: `json_value.to_object().to_hashmap()`
  - Bridge patterns:
    - TOML â†’ ObjectLike â†’ Object â†’ Global store
    - Object â†’ ObjectLike â†’ JSON/YAML/INI output
    - External configs â†” RSB Objects seamlessly
- [ ] QOL-12: Meteor-Object Integration Layer [8 SP]
  - Implement `Object::to_meteor()` â†’ TokenStream conversion
  - Implement `Object::from_meteor(stream)` parser
  - Add `MeteorBackend` implementation of ObjectLike trait
  - Enable MeteorEngine as storage backend for Objects
  - Support patterns:
    - Object â†’ Meteor compression for transport/storage
    - Meteor â†’ Object expansion for manipulation
    - Hierarchical keys: `doc.guides.install[intro]` â†’ `doc:guides.install:sections[intro]`
  - Use cases:
    - Compress Objects to Meteor strings for network transport
    - Store Objects in MeteorEngine for persistence
    - Document virtualization through Object API
    - Bridge RSB Objects with Meteor's stateful engine

**Token Module Deprecation** [NEW]
- [ ] DEPRECATE-01: Remove RSB token module in favor of Meteor [5 SP]
  - Remove src/token/ directory entirely
  - Remove token tests from tests/
  - Remove FEATURES_TOKEN.md documentation
  - Update any remaining references to use Meteor
  - Update prelude exports
  - Note: Meteor evolved from token module and supersedes it completely

**Hub Integration Strategy** [UPDATED]
- [ ] HUB-01: Migrate RSB to use Hub for shared dependencies [5 SP]
  - RSB is used by 13 projects (highest in ecosystem!)
  - Most RSB deps already in Hub (serde, chrono, regex, etc.)
  - Update Cargo.toml to use: `hub = { git = "https://github.com/oodx/hub.git", features = ["core-ext"] }`
  - Keep deps.rs as compatibility bridge re-exporting from Hub
- [ ] HUB-02: Add RSB to Hub as shared dependency [3 SP]
  - RSB qualifies per 5+ usage rule (used by 13 projects!)
  - Hub should re-export RSB for ecosystem-wide use
  - Coordinate with blade tool for auto-inclusion
- [ ] HUB-03: Update RSB's deps.rs to bridge pattern [2 SP]
  - Phase 1: deps.rs re-exports from Hub for external deps
  - Phase 2: Keep RSB-specific additions in deps.rs
  - Pattern: Hub (shared) â†’ RSB deps.rs (bridge) â†’ consumers
- [ ] HUB-04: Document RSB-Hub integration [2 SP]
  - Update HOWTO_HUB.md with RSB migration example
  - Document deps.rs bridge pattern
  - Add migration guide for RSB consumers

**Enhanced Bootstrap Features** [NEW]
- [ ] BOOTSTRAP-01: Config file loading in bootstrap macro [5 SP]
  - Add bootstrap!(config: "path") variant
  - Support multiple sources: bootstrap!(toml, config: "app.conf")
  - Order matters: later sources override earlier
  - Integration with existing load_config_file() in global::config
- [ ] BOOTSTRAP-02: Default --config flag support [3 SP]
  - Add standard --config=path flag handling
  - Auto-load config file during bootstrap if flag present
  - Document interaction with bootstrap!(config:) macro
  - Precedence: CLI flags > config file > TOML > env

**Enhanced Dispatch Features**

**Help Router/Dispatcher System** [NEW]
- [ ] HELP-01: Create help router module [8 SP]
  - Create src/help/router.rs with routing logic
  - Support multiple help sources (constants, lang strings, external docs)
  - Route help requests: help <topic> â†’ appropriate source
  - Integration with flag commands (prog topic --help routing)
- [ ] HELP-02: Help sources system [5 SP]
  - Constants-based help (HELP_BUILD, HELP_CONFIG, etc.)
  - External docs loading (markdown, text files)
  - Lang string support for i18n
  - Fallback hierarchy: specific â†’ generic â†’ "no help available"
- [ ] HELP-03: Help formatters [3 SP]
  - Plain text output (default)
  - JSON format (--format=json for API docs)
  - Markdown rendering option
  - Color/glyph support for terminal output

**Developer Experience**
- [ ] Init Functions: init_with_checks!, init_or_exit! macros [8 SP]
- [ ] Progress Bars: Unified progress system [15 SP]
- [ ] Generators Module: Template and scaffolding [20 SP]

**Testing & Documentation**
- [ ] Testing Framework: Enhanced assertion macros [25 SP]
- [ ] Integration Tests: Cross-feature validation [5 SP]
- [ ] Documentation Updates: API docs and examples [5 SP]

### FUTURE DEVELOPMENT & NOTES
- M2: OsString types introduction
- M3: UAT test expansion
- M4: Performance optimization

### BUGS & QOL ðŸ“Œ
- [x] **Fix standalone global clear wrappers** â€” ensure targeted tests only compile intended modules.
