
## RSB Development TODO

### COMPLETED ‚úÖ
- ‚úÖ **RSB Test Modernization**: ALL 10 modules now have modern sanity tests
- ‚úÖ **API Modernization**: Fixed all compilation errors, 61+ working tests
- ‚úÖ **Test Infrastructure**: Complete orchestrator system functional

#### RSB v2.0 Enhancement Suite Phase 1 ‚úÖ COMPLETE
- ‚úÖ **Object<T> Module**: Generic configuration object with Index trait [10 SP]
- ‚úÖ **Clear Globals**: Global store cleanup with protected keys [5 SP]
- ‚úÖ **CLI Args to Global**: Bootstrap integration with 1-based indexing [5 SP]
- ‚úÖ **Options Cleanup**: OptionsStrategy enum with Default/Sort/Remove strategies [10 SP]
- ‚úÖ **Flag Commands**: Flag command detection system [10 SP]

#### RSB v2.0 Enhancement Suite Phase 2 ‚úÖ COMPLETE
- ‚úÖ **TOML Snooping**: Cargo.toml metadata extraction [15 SP]

#### RSB v2.0 Enhancement Suite Phase 3 ‚úÖ COMPLETE
- ‚úÖ **REPL Support**: Interactive command mode [29 SP]
  - Complete v1 implementation (42 tests)
  - Quote-aware parsing with SimpleParser
  - Built-in commands (exit, quit, clear, history, help)
  - Integration macros (repl_arg!, repl_argc!, repl_dispatch!)
  - Documentation: FEATURES_REPL.md
  - BUG-01 fixed: Test isolation issues

### IN PROGRESS üîÑ

#### PRIORITY 1: LEGACY CODE CLEANUP

**MODULE_SPEC v3 Compliance** - See `docs/procs/LEGACY_UPGRADE_PLAN.md` for details

**LEG-01: Audit src/os.rs for Duplicates/Migration** [5 SP]
- Status: PENDING
- File: src/os.rs (401 lines, 39 exports)
- Compare with bash/ module for command execution overlap
- Check if CmdResult, exec!, cmd! are superseded
- Create src/os/mod.rs OR delete if superseded
- Reference: LEGACY_UPGRADE_PLAN.md ¬ßLEG-01

**LEG-02: Audit src/utils.rs for Duplicates/Distribution** [4 SP]
- Status: PENDING
- File: src/utils.rs (290 lines, 17 exports)
- Compare StringExt with string/ module
- Check array ops vs math/param modules
- Compare user interaction with visual/prompts/
- Distribute unique code to proper modules
- Reference: LEGACY_UPGRADE_PLAN.md ¬ßLEG-02

**LEG-03: Audit src/random.rs for Superseded Code** [2 SP] ‚úÖ COMPLETE
- Status: COMPLETE (2025-09-30)
- Removed src/random.rs (78 lines)
- All functions superseded by gx/ module
- rand_range_usize ‚Üí gx::rand_usize_inclusive (already exists)
- Updated lib.rs, prelude.rs, tests
- Fixed Cargo.toml bin path (dummy_cli.rs)
- All 371 sanity tests passing
- Reference: LEGACY_UPGRADE_PLAN.md ¬ßLEG-03

**LEG-04: Review src/_todo/ Directory** [1 SP] ‚è∏Ô∏è DEFERRED TO BACKLOG
- Status: DEFERRED (low priority)
- Directory: src/_todo/ (archived dev_* stubs, 510 lines)
- Not referenced in codebase, safe to delete when time permits
- Reference: LEGACY_UPGRADE_PLAN.md ¬ßLEG-04

**LEG-05: Document Prelude Consolidation Decision** [0 SP]
- Status: DECIDED - Keep as-is
- Files: src/prelude_dev.rs, src/prelude_ez.rs
- Working code, minimal benefit to refactor
- Optional future enhancement only
- Reference: LEGACY_UPGRADE_PLAN.md ¬ßLEG-05

**LEG-06: Audit & Consolidate streams/streamable** [DEFERRED]
- Status: DEFERRED - Complex, needs architectural review
- Files: src/streams.rs (405 lines) + src/streams/ + src/streamable/
- Dual modules suggest incomplete migration
- Requires 8-12 hours for safe consolidation
- Defer to dedicated refactor sprint
- Reference: LEGACY_UPGRADE_PLAN.md ¬ßLEG-06

#### PRIORITY 2: OPPORTUNISTIC/BACKLOG

**Object Module QOL Improvements** [NEW]
- [ ] QOL-01: Fix key normalization - CamelCase should convert to snake_case [3 SP]
  - Currently: "CamelCase" ‚Üí "camelcase" (wrong!)
  - Should be: "CamelCase" ‚Üí "camel_case" (proper snake_case)
- [ ] QOL-02: Export Object macros in prelude::macros [1 SP]
  - hub_config!, inf_config!, rsb_config! macros not re-exported
  - hub_object!, inf_object!, rsb_object! macros not re-exported
- [ ] QOL-03: Add additional Shape phantom types & fix RSB capitalization [2 SP]
  - Fix: Rename `RsbShape` ‚Üí `RSBShape` (proper capitalization)
  - Fix: Update `RsbConfig` ‚Üí `RSBConfig` type alias
  - Add `pub struct GenericShape;` for general-purpose Objects
  - Add `pub struct JSONShape;` for JSON-style data structures
  - Add `pub struct MeteorShape;` for Meteor data type representations
  - Add type aliases:
    - `GenericObject = Object<GenericShape>`
    - `JSONObject = Object<JSONShape>`
    - `MeteorObject = Object<MeteorShape>`
- [ ] QOL-04: Add Object::merge() for combining Objects [3 SP]
- [ ] QOL-05: Add Object::from_map() constructor [2 SP]
- [ ] QOL-06: Document Shape pattern philosophy in FEATURES_OBJECT.md [1 SP]
  - Clarify that Shapes are phantom types for compile-time hints only
  - Add examples showing type documentation without runtime cost
- [ ] QOL-07: Add Object iteration helpers [3 SP]
  - Add `iter()` method returning iterator over (key, value) pairs
  - Add `filter_prefix(prefix)` to get subset of keys with prefix
  - Add `to_vec()` for sorted key-value pairs
- [ ] QOL-08: Add Object display/debug improvements [2 SP]
  - Implement Display trait for pretty printing
  - Format: `ObjectNamespace { key1: "value1", key2: "value2" }`
  - Add `dump()` method for debug output with namespace info
- [ ] QOL-09: Add Object validation helpers [3 SP]
  - Add `require(key)` that returns Result instead of empty string
  - Add `require_all(&[keys])` for batch validation
  - Add `is_empty()` and `len()` methods
- [ ] QOL-10: Fix InfShape capitalization consistency [1 SP]
  - Consider: Should `InfShape` be `INFShape` for consistency with RSBShape?
  - Or keep as InfShape since "Inf" is short for "Infrastructure"?
  - Document the naming convention decision
- [ ] QOL-11: Add ObjectLike trait with translation layer [6 SP]
  - Define trait with core Object methods (get, set, has, keys, namespace)
  - Add translation methods:
    - `to_object(&self) -> Object` - convert any ObjectLike to Object
    - `from_object(obj: &Object) -> Self` - construct from Object
  - Implement for Object<T> and common types
  - Enable powerful patterns:
    - Mock objects for testing
    - Adapters for HashMap, BTreeMap, serde_json::Value
    - Blanket impls for conversions (From/Into)
    - Dynamic dispatch via Box<dyn ObjectLike>
  - Translation layer examples:
    - `config.to_object()` - any config type ‚Üí Object
    - `HashMap::from_object(&obj)` - Object ‚Üí HashMap
    - Chain translations: `json_value.to_object().to_hashmap()`
  - Bridge patterns:
    - TOML ‚Üí ObjectLike ‚Üí Object ‚Üí Global store
    - Object ‚Üí ObjectLike ‚Üí JSON/YAML/INI output
    - External configs ‚Üî RSB Objects seamlessly
- [ ] QOL-12: Meteor-Object Integration Layer [8 SP]
  - Implement `Object::to_meteor()` ‚Üí TokenStream conversion
  - Implement `Object::from_meteor(stream)` parser
  - Add `MeteorBackend` implementation of ObjectLike trait
  - Enable MeteorEngine as storage backend for Objects
  - Support patterns:
    - Object ‚Üí Meteor compression for transport/storage
    - Meteor ‚Üí Object expansion for manipulation
    - Hierarchical keys: `doc.guides.install[intro]` ‚Üí `doc:guides.install:sections[intro]`
  - Use cases:
    - Compress Objects to Meteor strings for network transport
    - Store Objects in MeteorEngine for persistence
    - Document virtualization through Object API
    - Bridge RSB Objects with Meteor's stateful engine

**Token Module Deprecation** [NEW]
- [ ] DEPRECATE-01: Remove RSB token module in favor of Meteor [5 SP]
  - Remove src/token/ directory entirely
  - Remove token tests from tests/
  - Remove FEATURES_TOKEN.md documentation
  - Update any remaining references to use Meteor
  - Update prelude exports
  - Note: Meteor evolved from token module and supersedes it completely

**Hub Integration Strategy** [UPDATED]
- [ ] HUB-01: Migrate RSB to use Hub for shared dependencies [5 SP]
  - RSB is used by 13 projects (highest in ecosystem!)
  - Most RSB deps already in Hub (serde, chrono, regex, etc.)
  - Update Cargo.toml to use: `hub = { git = "https://github.com/oodx/hub.git", features = ["core-ext"] }`
  - Keep deps.rs as compatibility bridge re-exporting from Hub
- [ ] HUB-02: Add RSB to Hub as shared dependency [3 SP]
  - RSB qualifies per 5+ usage rule (used by 13 projects!)
  - Hub should re-export RSB for ecosystem-wide use
  - Coordinate with blade tool for auto-inclusion
- [ ] HUB-03: Update RSB's deps.rs to bridge pattern [2 SP]
  - Phase 1: deps.rs re-exports from Hub for external deps
  - Phase 2: Keep RSB-specific additions in deps.rs
  - Pattern: Hub (shared) ‚Üí RSB deps.rs (bridge) ‚Üí consumers
- [ ] HUB-04: Document RSB-Hub integration [2 SP]
  - Update HOWTO_HUB.md with RSB migration example
  - Document deps.rs bridge pattern
  - Add migration guide for RSB consumers

**Enhanced Bootstrap Features** [NEW]
- [ ] BOOTSTRAP-01: Config file loading in bootstrap macro [5 SP]
  - Add bootstrap!(config: "path") variant
  - Support multiple sources: bootstrap!(toml, config: "app.conf")
  - Order matters: later sources override earlier
  - Integration with existing load_config_file() in global::config
- [ ] BOOTSTRAP-02: Default --config flag support [3 SP]
  - Add standard --config=path flag handling
  - Auto-load config file during bootstrap if flag present
  - Document interaction with bootstrap!(config:) macro
  - Precedence: CLI flags > config file > TOML > env

**Enhanced Dispatch Features**

**Help Router/Dispatcher System** [NEW]
- [ ] HELP-01: Create help router module [8 SP]
  - Create src/help/router.rs with routing logic
  - Support multiple help sources (constants, lang strings, external docs)
  - Route help requests: help <topic> ‚Üí appropriate source
  - Integration with flag commands (prog topic --help routing)
- [ ] HELP-02: Help sources system [5 SP]
  - Constants-based help (HELP_BUILD, HELP_CONFIG, etc.)
  - External docs loading (markdown, text files)
  - Lang string support for i18n
  - Fallback hierarchy: specific ‚Üí generic ‚Üí "no help available"
- [ ] HELP-03: Help formatters [3 SP]
  - Plain text output (default)
  - JSON format (--format=json for API docs)
  - Markdown rendering option
  - Color/glyph support for terminal output

**Developer Experience**
- [ ] Init Functions: init_with_checks!, init_or_exit! macros [8 SP]
- [ ] Progress Bars: Unified progress system [15 SP]
- [ ] Generators Module: Template and scaffolding [20 SP]

**Testing & Documentation**
- [ ] Testing Framework: Enhanced assertion macros [25 SP]
- [ ] Integration Tests: Cross-feature validation [5 SP]
- [ ] Documentation Updates: API docs and examples [5 SP]

### FUTURE DEVELOPMENT & NOTES
- M2: OsString types introduction
- M3: UAT test expansion
- M4: Performance optimization

### BUGS & QOL üìå
- [x] **Fix standalone global clear wrappers** ‚Äî ensure targeted tests only compile intended modules.
