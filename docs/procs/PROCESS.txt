====
 üöÄ RSB (REBEL STRING-BIASED) - MASTER WORKFLOW GUIDE
====

üìã **Meta Process v2**: Self-hydrating workflow system for RSB development
üèóÔ∏è **Project**: Advanced Rust string manipulation framework with bash integration
üìà **Current State**: Post-Epic 4 - API modernization complete, testing infrastructure mature

====
 üìÅ PROJECT STRUCTURE & KEY DOCUMENTS
====

## Essential Process Documents (docs/procs/)
- **PROCESS.txt** ‚Üê This master workflow guide
- **CONTINUE.md** ‚Üê Current session status and handoffs
- **QUICK_REF.txt** ‚Üê 30-second ultra-fast context
- **SPRINT.txt** ‚Üê Current iteration tasks
- **ROADMAP.txt** ‚Üê Strategic milestones and objectives
- **TASKS.txt** ‚Üê Detailed development task breakdown

## Core Technical References (docs/tech/)
- **INDEX.md** ‚Üê Master technical documentation index
- **development/** ‚Üê How-to guides, test organization, module specs
- **features/** ‚Üê Complete feature documentation (19 modules)
- **features/plans/** ‚Üê Implementation planning guides
- **reference/** ‚Üê Architecture, RSB philosophy, BashFX alignment

## Historical Wisdom (docs/misc/archive/)
- **eggs/** ‚Üê China/Tina analysis results and consolidated insights
- **sessions/** ‚Üê Historical session documentation and decisions

====
 üîÑ SELF-HYDRATING WORKFLOW PROCESS
====

## Step 1: Context Hydration Checklist
‚úÖ **Read START.txt** (Single entry point - completed if you're here!)
‚úÖ **Read this PROCESS.txt** (Master workflow - you're doing it now!)
‚úÖ **Read CONTINUE.md** (Current session state and immediate context)
‚úÖ **Read SPRINT.txt** (Active tasks and current priorities)
‚úÖ **Skim QUICK_REF.txt** (Essential project context in 30 seconds)

## Step 2: Phase Detection & Orientation
Check ROADMAP.txt and SPRINT.txt to understand the current development phase:
- Review recent completions
- Identify active milestones
- Understand current priorities

## Step 3: Work Execution Patterns

### üß™ **Development Session Pattern**
1. **Health Check**: `./bin/test.sh --rsb lint && ./bin/test.sh --rsb run sanity`
2. **Context Verification**: Review CONTINUE.md for latest session state
3. **Task Selection**: Check SPRINT.txt for priority work items
4. **Implementation**: Follow MODULE_SPEC patterns and RSB conventions
5. **Validation**: Run targeted tests for modified modules
6. **Documentation**: Update relevant docs/tech/ files if needed
7. **Session Closure**: Update CONTINUE.md with handoff information

### üìã **Planning Session Pattern**
1. **Strategic Review**: Read ROADMAP.txt for long-term objectives
2. **Task Analysis**: Review TASKS.txt for detailed work breakdown
3. **Priority Assessment**: Update SPRINT.txt with current iteration focus
4. **Documentation**: Update planning documents as needed
5. **Session Closure**: Document planning decisions in CONTINUE.md

### üîç **Analysis Session Pattern**
1. **Scope Definition**: Identify analysis target (code, docs, architecture)
2. **Tool Selection**: Use China (summary) or Tina (validation) agents as needed
3. **Data Collection**: Gather relevant documentation and code samples
4. **Insight Consolidation**: Create analysis results in .analysis/
5. **Action Items**: Convert insights to actionable tasks in SPRINT.txt
6. **Documentation**: Update relevant reference docs with findings

## Step 4: Session Closure & Handoff Requirements
**MANDATORY**: Update CONTINUE.md every session with:
- Session duration and branch information
- Completed work with specific file references
- Any blockers encountered with context
- Critical actions required for next agent/session
- Git commit SHA for context hash
- Modified files count

====
 üìä PROJECT STATUS QUICK REFERENCE
====

## Current Priorities & Focus Areas
- **Meta Process v2**: Implementing self-hydrating workflow system
- **Future Development**: OsString types, UAT expansion, performance optimization
- **Documentation**: Maintaining alignment with fx-testsh runner integration
- **Quality**: Zero cargo warnings, comprehensive test coverage

## Progress Tracking Metrics
- **API Modernization**: 100% complete (Epic 4 achievement)
- **Test Coverage**: 61+ working tests across 10 modules
- **Documentation**: 36 technical documents, systematic organization
- **Infrastructure**: fx-testsh v2.2.0 integration complete

## Decision Points & Context
- **Testing Strategy**: Legendary runner scaffold powers bin/test.sh
- **Architecture**: RSB (Rebel String-Biased) philosophy with bash integration
- **Quality Gates**: Sanity/smoke/unit/regression suites must stay green
- **Documentation Standard**: Comprehensive feature docs with implementation plans

====
 üîß COMMON WORKFLOWS
====

## Sprint Planning Workflow
1. Review ROADMAP.txt for strategic alignment
2. Analyze TASKS.txt for available work items
3. Prioritize based on current phase and dependencies
4. Update SPRINT.txt with iteration goals
5. Communicate sprint objectives in CONTINUE.md

## Development Session Workflow
1. Health check: `./bin/test.sh --rsb lint run sanity`
2. Module focus: `cargo test --test sanity <module> -- --nocapture`
3. Documentation alignment: run `bin/feat.py <feature> --update-doc` before/after feature doc changes to refresh sentinel sections (see `README_FEATS.md`).
4. Implementation following MODULE_SPEC patterns
5. Targeted validation: `./bin/test.sh run sanity|uat|unit`
6. Documentation updates in docs/tech/ as needed

## Milestone Transition Workflow
1. Archive completed work to DONE.txt
2. Update ROADMAP.txt with progress and next milestones
3. Refresh QUICK_REF.txt with new project focus
4. Consolidate session insights into reference documentation
5. Plan next phase in SPRINT.txt

## Quality Assurance Workflow
1. Run comprehensive test suite: `./bin/test.sh --rsb run all`
2. Validation check: `./bin/validate-docs.sh` (when implemented)
3. Documentation review for currency and accuracy
4. Performance verification for critical paths
5. Integration testing with bash environment

====
 üéØ AGENT QUICK START GUIDE
====

## Essential Context for New Team Members/Agents
- **RSB Philosophy**: Rebel String-Biased approach to string manipulation
- **Epic 4 Legacy**: Massive modernization effort successfully completed
- **Testing Excellence**: Comprehensive test infrastructure with fx-testsh integration
- **Documentation Discipline**: Systematic organization with 36 technical documents

## Key Project Background & Architecture
- **Framework**: Advanced Rust string manipulation with bash integration
- **Testing**: Sanity/smoke/unit/regression suites using cargo + fx-testsh
- **Documentation**: Layered system - process docs, technical refs, feature specs
- **Analysis Pipeline**: China/Tina agent collaboration for wisdom consolidation

## Workflow Rules & Conventions
- **Entry Point**: Always start with START.txt, then this PROCESS.txt
- **Session Management**: MANDATORY CONTINUE.md updates every session
- **Testing**: Health check before and after development work
- **Documentation**: Keep docs/tech/ structure pristine, use docs/procs/ for process
- **Quality**: Zero cargo warnings, green test suites before handoffs

## RSB-Specific Development Patterns
- **Module Structure**: Follow MODULE_SPEC patterns in docs/tech/development/
- **Prelude Policy**: Strict rules in docs/tech/development/PRELUDE_POLICY.md
- **Feature Implementation**: Use docs/tech/features/plans/ for guidance
- **Testing Strategy**: Comprehensive sanity tests for all 10 modules

====
 üìö REFERENCE LINKS
====

## Essential Files by Priority
1. **CONTINUE.md** ‚Üê Current session state (READ FIRST)
2. **QUICK_REF.txt** ‚Üê 30-second context for urgent starts
3. **SPRINT.txt** ‚Üê Active tasks and current priorities
4. **docs/tech/INDEX.md** ‚Üê Master technical documentation index
5. **ROADMAP.txt** ‚Üê Strategic objectives and milestones

## Topic-Specific References in docs/tech/
- **Architecture**: RSB_ARCH.md, RSB_V2.md, REBEL.md
- **Development**: MODULE_SPEC.md, PRELUDE_POLICY.md, HOWTO_UPDATE_RSB.md
- **Testing**: HOWTO_TEST.md, TEST_ORGANIZATION.md, RSB_TEST_RUNNER.md
- **Features**: Complete documentation in features/ and features/plans/
- **Integration**: RSB_BASHFX_ALIGN.md, BASHFX-v3.md

## Testing & Validation Tools
- **Health Check**: `./bin/test.sh --rsb lint run sanity`
- **Module Testing**: `cargo test --test sanity <module> -- --nocapture`
- **Comprehensive**: `./bin/test.sh --rsb run all`
- **Documentation**: `./bin/validate-docs.sh` (Meta Process v2 requirement)
- **UAT**: `cargo test --test uat -- --nocapture`

====
 üö® CRITICAL SUCCESS FACTORS
====

1. **DISCIPLINE**: MUST update CONTINUE.md every session (mandatory)
2. **HEALTH CHECKS**: Always verify test status before and after work
3. **DOCUMENTATION**: Keep docs/tech/ structure pristine (36 files)
4. **QUALITY**: Zero cargo warnings, green test suites required
5. **CONTEXT**: Use QUICK_REF.txt for urgent starts, full process for comprehensive work

====
Last Updated: 2025-09-20 (Meta Process v2 Implementation)
Next Review: After Phase 5 automation implementation
====
