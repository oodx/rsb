====
 üöÄ RSB SPRINT: v2.0 Phase 1 - Foundation Features
====

üìÖ **Sprint Duration**: 2024-12-28 to 2025-01-11 (2 weeks)
üéØ **Sprint Goal**: Implement foundation features for RSB v2.0 Enhancement Suite
üìä **Progress**: 67% complete (20/30 SP - Object<T>, Clear Globals, and CLI Args complete)

====
 üîÑ ACTIVE TASKS (IN PROGRESS)
====

## Sprint 1: Foundation Implementation
**Story Points**: 30 Total

### TASK 1.1: Generic Object<T> Type [10 SP] ‚úÖ
**Priority**: HIGH - Foundation for other features
**Owner**: Claude
**Status**: COMPLETE

- [x] Create src/object/mod.rs module structure [2 SP]
- [x] Implement Object<T> with PhantomData [3 SP]
  - [x] Basic struct with HashMap<String, String>
  - [x] PhantomData for type parameter
  - [x] new() and from_global() constructors
  - [x] get(), get_or(), has(), set() methods
- [x] Add Index trait for bracket notation [2 SP]
  - [x] Implement std::ops::Index
  - [x] Support nested access with dot notation
- [x] Create helper macros (get_hub!, hub_config!, etc.) [2 SP]
  - [x] hub_config!, inf_config!, rsb_config! for values
  - [x] get_hub!, get_inf!, get_rsb! for Objects
- [x] Add comprehensive unit tests [1 SP]
  - [x] 10 sanity tests passing
  - [x] 6 UAT tests with visual demonstrations

### TASK 1.2: Clear Globals [5 SP] ‚úÖ
**Priority**: HIGH - Can be parallel with Object
**Owner**: Claude
**Status**: COMPLETE

- [x] Extend src/global/store.rs with clear methods [2 SP]
  - [x] clear_all(), clear_prefix(), clear_suffix()
  - [x] clear_pattern() with regex support
- [x] Implement protected keys from Cargo.toml [1 SP]
  - [x] Default protected keys (PATH, HOME, USER, SHELL, RSB_HOME, RSB_CONFIG)
  - [x] RSB_PROTECTED_KEYS env variable support
- [x] Add RSB_GLOBAL_RESET flag requirement [1 SP]
- [x] Test with various filter patterns [1 SP]
  - [x] 10 sanity tests passing
  - [x] 6 UAT tests with visual demonstrations

### TASK 1.3: CLI Args to Global [5 SP] ‚úÖ
**Priority**: MEDIUM - Quick win
**Owner**: Claude
**Status**: COMPLETE

- [x] Create cli_to_global() function [2 SP]
  - [x] Add to src/cli/bootstrap.rs
  - [x] Integrated with cli_bootstrap() - now automatic!
- [x] Store args with 1-based indexing [1 SP]
  - [x] cli_arg_1, cli_arg_2, etc. (bash convention)
  - [x] cli_argc for count (excluding program name)
- [x] Implement helper macros [1 SP]
  - [x] cli_arg!, cli_argc!, cli_prog!
  - [x] cli_args!, cli_argv!, cli_has_arg!
- [x] Add semicolon-joined cli_args storage [1 SP]
  - [x] 11 sanity tests passing
  - [x] 6 UAT tests with visual demonstrations

### TASK 1.4: Options Cleanup [10 SP]
**Priority**: MEDIUM - Improves UX
**Owner**: TBD

- [ ] Create OptionsStrategy enum (default/sort/remove) [2 SP]
- [ ] Implement apply_options_strategy() [3 SP]
  - [ ] Sort: move flags to end
  - [ ] Remove: delete processed flags
  - [ ] Default: no change
- [ ] Add flag boundary validation [2 SP]
  - [ ] Detect problematic --flag value patterns
  - [ ] Warn on potential issues
- [ ] Update options! macro with strategy parameter [2 SP]
  - [ ] options!(&args) - use config
  - [ ] options!(&args, strategy: "remove") - explicit
- [ ] Test backward compatibility [1 SP]

====
 üìã SPRINT BACKLOG (Next Sprint)
====

## Phase 2: Enhanced Dispatch [25 SP]
- Flag Commands [10 SP]
- TOML Snooping [15 SP]

## Phase 3: Advanced Features [30 SP]
- REPL Support [20 SP]
- Integration & Testing [10 SP]

====
 üö® DEPENDENCIES & RISKS
====

**Dependencies**:
- Object type is foundation for TOML snooping and REPL
- Bootstrap changes affect multiple features
- options! macro changes need careful testing

**Risks**:
- Performance impact of Object with many keys
- Backward compatibility of options changes
- Global store modifications affecting existing code

====
 üìà SPRINT METRICS
====

- **Planned Story Points**: 30
- **Completed Story Points**: 20/30 (67%)
- **On Track**: YES (Object, Clear Globals, and CLI Args complete)
- **Quality Gate**: All tests must pass, zero cargo warnings

====
 üéØ DEFINITION OF DONE
====

For each task completion, ALL must be true:
- [ ] Code implemented and compiles without warnings
- [ ] Unit tests written and passing
- [ ] Integration tests where applicable
- [ ] Documentation updated (inline and module docs)
- [ ] Feature documented in appropriate FEATURES_*.md
- [ ] No performance regression
- [ ] Backward compatibility maintained
- [ ] Code reviewed (if team available)

For Sprint completion:
- [ ] All 30 story points completed
- [ ] FEATURES_OBJECT.md finalized
- [ ] Updated FEATURES_GLOBAL.md with clear functions
- [ ] Updated FEATURES_CLI.md with cli_to_global
- [ ] Updated FEATURES_OPTIONS.md with strategies
- [ ] All tests green
- [ ] Ready for Phase 2

====
 üìù NOTES
====

**Implementation Order**:
1. Start with Object<T> (most complex, foundation)
2. Clear globals in parallel (independent)
3. CLI args to global (quick win)
4. Options cleanup (needs careful testing)

**Documentation Created**:
- ‚úÖ FEATURES_OBJECT.md (already created)
- ‚úÖ IDEAS_IMPLEMENTATION_PLAN.md (technical design)
- ‚úÖ Updated ROADMAP.txt with v2.0 milestones
- ‚úÖ Updated TASKS.txt with detailed breakdown

====
Next Sprint: v2.0 Phase 2 - Enhanced Dispatch (Flag Commands + TOML)
====