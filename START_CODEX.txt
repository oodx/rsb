====
üöÄ RSB / CODEX SESSION STARTER
====

This repository hosts the RSB (Rebel String-Biased) framework ‚Äî a string-first Rust toolkit with deep CLI + Bash ergonomics. Use this guide to get productive fast, then dive into the process/docs for full context.

----
QUICK START CHECKLIST
----
1. Read `docs/procs/PROCESS.txt` ‚Üí meta workflow & rules.
2. Read `docs/procs/CONTINUE.md` ‚Üí last handoff + open threads.
3. Review `docs/procs/TASKS.txt` ‚Üí live task board (Phase 2 progress, backlog, bugs).
4. Run `./bin/test.sh lint` ‚Üí ensure test org still compliant before changing anything.

----
STATUS SNAPSHOT (2025-09-29)
----
- Phase 1 (Foundation Features) ‚úÖ complete.
- Phase 2 in flight (25 SP total):
  * ‚úÖ Task 2.2: TOML Snooping (metadata extraction via `rsb::toml`).
  * ‚è≥ Task 2.1: Flag Commands (help/version pre-dispatch) ‚Äî just landed, verify docs/tests.
- Phase 3 (REPL support) queued; implementation strategy: `docs/proposals/REPL_STRATEGY.md`.
- Object module QOL + Hub integration tracked in TASKS backlog.

----
KEY DIRECTIONS & FILES
----
Code layout:
- `src/cli/` ‚Üí Args/options/dispatch/flags/bootstrap.
- `src/toml/` ‚Üí new TomlSnooper (metadata ‚Üí globals).
- `src/object/` ‚Üí Object<T> container + helpers (uses `string::to_snake_case`).
- `src/string/` ‚Üí case conversion helpers (snake/pascal/screaming, macros).
- `tests/sanity.rs`, `tests/uat.rs` ‚Üí orchestrators; module-specific suites under `tests/sanity/` & `tests/uat/`.

Process & reference docs:
- `docs/procs/` ‚Üí START / PROCESS / CONTINUE / TASKS / ROADMAP / SPRINT.
- `docs/proposals/IDEAS_IMPLEMENTATION_PLAN.md` ‚Üí phase breakdown & acceptance criteria.
- `docs/proposals/REPL_STRATEGY.md` ‚Üí detailed plan for upcoming REPL epic.
- `docs/tech/features/FEATURES_*.md` ‚Üí per-feature docs (Options, TOML, CLI, etc.).

Handy references:
- `RSB_ANALYSIS.md` ‚Üí ecosystem + architecture summary.
- `.eggs/` ‚Üí China/Tina analysis logs (module compliance, object module insights).

----
TOOLS & COMMANDS
----
- `./bin/test.sh` ‚Äî central test/doc runner (`./bin/test.sh help`).
  * `./bin/test.sh lint` ‚Üí enforce test suite organization.
  * `./bin/test.sh run sanity` / `run uat` ‚Üí Rust test wrappers.
  * `./bin/test.sh docs` ‚Üí quick doc index (targets: rsb, howto, org, features, ‚Ä¶).
- `bin/feat.py` ‚Äî feature doc helper (see `README_FEATS.md` for usage).
- `cargo test --test sanity_<module>` ‚Üí targeted suites (colors, global_clear, toml, ‚Ä¶).

----
TEST & BUILD REMINDERS
----
- Always run `./bin/test.sh lint` before/after adding tests.
- Use new options macros carefully:
  * `options!(&args)` ‚Üí legacy (no cleanup).
  * `options!(mut args)` / `options!(mut args, strategy: "remove")` ‚Üí OptionsStrategy.
- TOML snooping caches metadata in globals; re-run `enable_toml_snooping()` after changes to Cargo metadata (stale keys now cleared automatically).

----
NEXT UP
----
- Validate recently merged Flag Commands implementation (sanity/uat suites, docs, integration).
- Prep for Task 3.1 REPL: confirm design notes in `docs/proposals/REPL_STRATEGY.md`, plan module scaffolding under `src/repl/`.
- Keep TASKS and CONTINUE updated at session end.

Happy rebelling against the princess compiler. üè¥‚Äç‚ò†Ô∏è
====
