RSB ⇄ XStream Migration Guide

Updated: 2025-09-13

Purpose
- Define clear boundaries between RSB (framework) and XStream (library).
- Identify duplications and consolidate common, generic utilities in RSB.
- Outline phased migration steps, aligned with RSB MODULE_SPEC and HOWTO_UPDATE_RSB.

Audience
- RSB and XStream maintainers and contributors.

Guiding Policies (RSB)
- Prelude stays minimal and core-only; optional subsystems require explicit imports.
- Module-owned macros with helpers in `<module>/helpers.rs`; orchestrate via `<module>/mod.rs`.
- Features gate visual/color/glyph packages; opt-in only.
- A feature is “complete” when documented under `docs/tech/features/` with tests.

High-Level Boundaries
- RSB (framework, generic):
  - Strings, streams, closure-enabled text ops (xsed/xgrep), streamable utilities.
  - Optional visuals/colors registry and glyphs (feature-gated).
  - Generic generators (alnum/hex/uuid/range); adapter TRAITS (format-agnostic).
  - Error surfaces that remain token-agnostic.
- XStream (specialized, token/namespace):
  - Token/namespace types, TokenBucket, tokenize/parse/validate.
  - Fork/Merge/Gate algorithms and pipeline drivers.
  - Token-aware adapters (JSON/CSV ↔ token streams), ceremonies, visual weaves.

Current Overlap & Consolidation Targets
- Colors/Visuals
  - XStream `src/colors.rs` duplicates color constants and helpers.
  - Action: Replace usage with `rsb::visual::colors::{get_color,colorize,color_mode,color_enable_with,...}`.
  - Keep token-to-color mapping and ceremonies in XStream; import RSB colors behind an `rsb-visuals` Cargo feature.

- sed/xsed and grep/xgrep
  - RSB Stream has `sed`, `sed_lines`, and friends; `xcls::xsed` and `xcls::xgrep` provide closure variants.
  - Action: Document xsed/xgrep under strings/xcls features; add quick examples and unit tests.

- Streamable functions
  - RSB owns generic streamables (Replace, Grep, Sort, Unique, Sed, SedLines).
  - XStream owns token-specific streamables under `xstream::types::streamable`.
  - Action: Keep split; prefer RSB for line-oriented, token-agnostic behavior.

Gaps to Fill in RSB (Generic, Framework-Level)
- Stream combinators (token-agnostic):
  - `interleave(other: &Stream) -> Stream`
  - `zip_lines(other: &Stream) -> Stream`
  - `chunk(n: usize) -> Vec<Stream>` or `Stream` emitting blocks
  - `dedupe_any() -> Stream` (non-consecutive dedup; `uniq()` remains consecutive)

- Generators module (`rsb::gen`):
  - Trait `Generator { fn next(&mut self) -> String; fn take(&mut self, n) -> Vec<String> }`
  - Implementations backed by existing `rand_*` primitives: alpha, alnum, hex, uuid, numeric ranges.
  - Convenience: `gen::lines::{repeat, count_from}`, `gen::streams::{cycle(&[&str])}`.
  - Add `docs/tech/features/FEATURES_GEN.md`; keep off the prelude.

- Adapter traits (format-agnostic):
  - `rsb::adapters::{FormatHandler<T>, RecoveryStrategy, AdapterError}`
  - Traits only: no JSON/CSV logic in RSB; XStream implements concrete handlers.
  - Provide minimal demo tests to validate trait ergonomics.

- Error surfaces:
  - Keep `StreamError` and add `AdapterError` with consistent messages and Result aliases.

RSB _todo Alignment (Token Substrate)
- `src/_todo/dev_token/*` remains token-agnostic helpers (no namespace semantics):
  - `validate`: `is_identifier`, `is_literal`, `is_keyword`, `validate_token_format` (rule-driven), reuse `rsb::string` helpers.
  - `format`: `quote_token`, `escape_token`, `join_tokens`, `pad_token`, `format_token_table` (display only).
  - `parse`: `parse_key_value`, `parse_quoted`, `tokenize_with_context` (simple, no namespaces).
  - Keep the module optional and out of prelude until proven stable.

What Stays in XStream (Do NOT move)
- TokenBucket/namespace grammar and classification; hierarchical lookups; bucket operations.
- Fork/Merge/Gate strategies and pipeline orchestration.
- Ceremonies and visual weaving logic (token-colored displays, drivers).
- Token-aware adapters (JSON/CSV ↔ tokens), macros tied to token semantics.

Phased Migration Plan
- M1: Visuals consolidation (low risk)
  - XStream: behind `rsb-visuals` feature, import from `rsb::visual::colors` and keep a no-color fallback path.
  - RSB docs: Add “consumer usage” snippet to `FEATURES_COLORS.md`.
  - Acceptance: XStream builds with and without visuals; ceremony outputs unchanged when visuals enabled.

- M2: Stream combinators + baseline generators in RSB
  - RSB: Add `Stream::{interleave, zip_lines, chunk, dedupe_any}` and unit tests.
  - RSB: Introduce `rsb::gen` with baseline generators and tests; add FEATURES_GEN doc.
  - Acceptance: Additive APIs; existing tests remain green.

- M3: Adapter traits + unified errors
  - RSB: Add `adapters/{traits.rs,error.rs}` with `FormatHandler<T>`, `RecoveryStrategy`, `AdapterError`.
  - XStream: Implement `JsonHandler`, `CsvHandler` using RSB traits; adapt existing `adapter.rs` to the traits.
  - Acceptance: XStream adapter tests pass; consistent error surface.

- M4: Token substrate helpers (optional)
  - RSB: Implement minimal `dev_token` helpers listed above; unit tests only; off prelude.
  - Acceptance: Helpers compile behind feature flag and pass tests; no namespace logic.

- M5: Cleanup & docs
  - XStream: Remove duplicated color utilities and any generic generators replaced by RSB.
  - RSB/XStream: Update READMEs and integration notes; add migration snippets.

Actionable Changes (Checklist)
- RSB
  - [ ] Document xsed/xgrep under strings/xcls; add examples and tests.
  - [ ] Add stream combinators with tests.
  - [ ] Add `gen/` module + FEATURES_GEN.md + tests.
  - [ ] Add adapters/traits + AdapterError + demo tests.
  - [ ] Add short consumer note to FEATURES_COLORS.md.
  - [ ] Keep prelude policy intact; no optional exports by default.

- XStream
  - [ ] Gate visuals import (`rsb-visuals`); replace local `colors.rs` usage where feasible.
  - [ ] Implement adapters against RSB traits; keep JSON/CSV logic here.
  - [ ] Keep token semantics and ceremonies; expose aliases to harmonize naming with RSB (e.g., `unique` vs `dedupe`).
  - [ ] Remove duplication after RSB features land; add migration notes.

Naming and API Notes
- Prefer generic names in RSB (e.g., `unique`, `dedupe_any`, `interleave`); in XStream keep token terminology but offer aliases to ease migration.
- Macros remain thin; live under their owning module when adding new ones.

Testing & CI
- RSB: Add focused unit tests for new combinators, gen, and adapter traits. Run `cargo test` and feature suites (incl. `--features visuals`).
- XStream: Add tests for visuals on/off paths and adapter conformance; ensure ceremonies remain stable.

References
- RSB: `docs/tech/development/HOWTO_UPDATE_RSB.md`, `docs/tech/development/MODULE_SPEC.md`, `docs/tech/reference/RSB_ARCH.md`, `docs/tech/reference/REBEL.md`.
- XStream: `RSB_INTEGRATION_STRATEGY.md`, `src/xstream/*`, `src/adapter.rs`, `src/colors.rs`.

Notes for Contributors
- Keep changes small and verifiable; follow MODULE_SPEC structure.
- Do not expand prelude; keep optional modules explicitly imported.
- Ensure features under `docs/tech/features/` before claiming completeness.

