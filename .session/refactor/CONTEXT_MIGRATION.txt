RSB Context → Global/Host Migration Plan
Updated: 2025-09-12

Objective
- Split responsibilities currently in src/context.rs into dedicated modules per the Module Specification.
- Keep bootstrap orchestration in CLI (not in global). Preserve behavior while clarifying boundaries.

Target Surfaces
1) rsb::global (Pure state + helpers)
   - Store: Context, CTX, set_var/get_var/has_var/unset_var, get_all_vars (crate-internal Context).
   - Expansion: expand_vars (and underlying Context::expand).
   - Boolean helpers: is_true/is_false (integer semantics).
   - Token stream helper: is_token_stream.
   - Config I/O: parse_config_content, load_config_file, save_config_file, export_vars.
   - Registries/Introspection: CallFrame, function registry, call stack, show_* helpers.
   - Color/Glyph registries: COLORS/GLYPHS + initialize_default_colors (with explicit apply function).

2) rsb::host (Discovery)
   - Env/modes: setup_standard_modes (read env → *_MODE = 1).
   - Paths: setup_xdg_paths, setup_rsb_paths, ensure_xdg_directories.
   - Script awareness: setup_script_awareness (SCRIPT_NAME/PATH/DIR, PWD).
   - RSB_COLORS: host::read_rsb_colors_env() returns spec; global::apply_rsb_colors(spec) updates registries.
   - TTY/system helpers as needed (stdin_is_tty, hostname/username later).

3) rsb::cli (Lifecycle)
   - Keep rsb_bootstrap(args) here, calling host/global in sequence:
     1. Import environment (existing get_env! or host import function)
     2. Read RSB_COLORS env (host), apply to registries (global)
     3. XDG + RSB paths (host)
     4. Ensure directories (host)
     5. Standard modes (host)
     6. Script awareness (host)

Sequenced Steps
1. Alias surfaces (non-breaking)
   - global: re-export current context API (temp shim)
   - host: re-export dev_host orchestrator
   - prelude: export rsb::global, rsb::host

2. Move global pieces
   - Move registries (functions/colors/glyphs/call stack) and config I/O into dev_global; re-export via global.

3. Split RSB_COLORS
   - host::read_rsb_colors_env(), global::apply_rsb_colors(spec)
   - Update bootstrap (cli) to use split

4. Move host pieces
   - setup_xdg_paths/setup_rsb_paths/ensure_xdg_directories/setup_script_awareness/setup_standard_modes → host
   - cli bootstrap calls host for these

5. Move store/expansion
   - Context/CTX + set/get/has/unset + expand_vars → dev_global
   - Point rsb::global to dev_global; leave context as temporary re-export

6. Retire context
   - Switch macros and internal uses to rsb::global/host
   - Remove context re-exports; update docs

Macro Audit (context references)
- macros/core.rs: bootstrap! (cli), get_env! (env import), options! (uses set_var), appref/args
- macros/stderr.rs: echo!/printf! → expand_vars
- macros/control_validation.rs: set_var, expand_vars, export/load config
- macros/dispatch.rs: function registry helpers (register_function, push/pop, show_help/functions/stack)

Accounting Plan for Macros
- Change macro call sites to rsb::global::* (store/expansion/config/registries) and rsb::host::* where applicable.
- Keep bootstrap orchestration in cli; bootstrap! delegates to cli::rsb_bootstrap().
- Maintain behavior; no opportunistic changes during migration.

Notes
- Env belongs to host; global should not own env discovery or bootstrap.
- Integer booleans only ("1" / "0").
