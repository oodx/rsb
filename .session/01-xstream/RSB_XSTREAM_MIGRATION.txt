RSB ⇄ XStream Migration Plan

Updated: 2025-09-13

Scope
- Align RSB (framework) and XStream (token-stream library) boundaries.
- Identify what moves into RSB as core, what stays in XStream as specializations.
- Provide concrete, MODULE_SPEC-compliant steps for safe adoption.

Sources Reviewed
- RSB: docs/tech/development/HOWTO_UPDATE_RSB.md, docs/tech/development/MODULE_SPEC.md, docs/tech/features/*, src/{streams.rs,string/,streamable/,visual/,xcls/,...}
- XStream: README.md, INTEGRATION.md, RSB_INTEGRATION_STRATEGY.md, src/{xstream/*,adapter.rs,macros.rs,colors.rs,driver.rs}

Guiding Rules (RSB)
- Prelude policy: keep prelude small and core-only; optional subsystems require explicit import.
- MODULE_SPEC: module-owned macros, helpers→utils split, typed errors, progressive enhancement.
- Features are complete when a docs/tech/features/FEATURES_*.md exists with tests (wrappers + suites).

Feature Mapping (Framework vs Library)
- In RSB (framework-level, general-purpose)
  - Streams (generic, line-oriented):
    - Existing: `Stream::{grep, sed, sed_lines, sed_around, sed_insert, sed_template, head, tail, sort, uniq/unique, map, filter, lower, upper, case helpers}`
    - Add candidates: `interleave(lines)`, `zip(lines)`, `merge_sorted()`, `dedupe_any()` (non-consecutive), `chunk(n)` — generic, token-agnostic.
  - Streamable core (Unix-pipe pattern): keep generic functions (Replace, Grep, Sort, Unique, Sed, SedLines, etc.).
  - Closure-powered text ops (xcls): keep `xsed` (already present), `xgrep` (present), and document in FEATURES_STRINGS or a small FEATURES_XCLS.
  - Visuals (optional): colors/glyphs/prompts under feature flags. Expose only generic color APIs; no token-color coupling.
  - Generators (generic): simple string/line generators for tests and demos (alnum/hex/uuid, sequences, repeated patterns). Live under `src/gen/` with a short feature guide.
  - Adapter patterns (traits only): define generic `FormatAdapter` and `RecoveryStrategy` traits in RSB for reuse (no token semantics). Concrete JSON/CSV→tokens stay in XStream.
  - Error types: `rsb::error::StreamError`, `AdapterError` (format-agnostic) for consistent downstream wrapping.

- In XStream (high-level, token/namespace specializations)
  - Token/namespace types and parsing (TokenBucket, BucketMode, TokenStream, classification/validation).
  - Fork/Merge/Gate operations: namespace-aware strategies, collision policies, sync/balance/wait gates.
  - Visual ceremonies: color-by-namespace weave, operation demonstrations, driver binaries.
  - XStreamAdapter implementations: JSON/CSV round-trips to token streams, pipeline builder, macros tailored to token flows.
  - Token-aware generators: namespace-colored, synchronized token streams, pattern-specific demos.

Overlap And Consolidation
- Colors
  - XStream’s `colors.rs` duplicates terminal-color constants and helpers that RSB’s `visual::colors` already provides behind features.
  - Recommendation: rebase XStream to import from `rsb::visual::colors` (feature-gated) and remove local color tables where feasible. Keep any token-specific “color-by-namespace” mapping logic in XStream.

- sed/xsed
  - RSB `Stream::sed*` are canonical for line content; `xcls::xsed` closure variant is correctly housed in RSB. Ensure brief docs under strings feature; keep token-value transforms as examples only (not API promises).

- Streamable functions
  - RSB implements generic streamables (Replace/Grep/… + Sed/SedLines). XStream implements token-focused streamables under `xstream/types` and `xstream/{fork,merge,gate}.rs`. Keep that split.

Gaps And Value Adds (Recommended)
- RSB additions (generic)
  - Stream combinators: `interleave`, `zip_lines`, `dedupe_any`, `chunk(n)`. Value: helps non-token users and provides primitives XStream can build atop.
  - Generators: `gen::lines::{repeat, count_from, random_alnum(n), random_uuid}`; `gen::streams::{cycle(&[&str]), join_with(delim)}`. Back existing tests and UATs.
  - Adapter traits: `FormatHandler<T>` and `RecoveryStrategy` enums (FailFast, Skip, DefaultValue, Transform). No JSON/CSV logic in RSB; only the trait surface + errors.
  - Error module: unify `StreamError` and adapter errors for consistent wrapping in macros and tests.
  - Docs: FEATURES_STREAMS.md (or extend FEATURES_STRINGS.md) to capture stream combinators; small FEATURES_GEN.md for generators.

- XStream improvements (specialized)
  - Reuse RSB visuals: drop local RESET/constants in favor of `rsb::visual::colors` when features are enabled; fall back gracefully when disabled.
  - Isolate token parsing/validation to `xstream::types` and keep RSB imports minimal and stable.
  - Harmonize naming with RSB: “dedupe” vs “unique/uniq”; expose aliases to ease migration.

Architecture Recommendations
- Boundaries
  - RSB provides generic building blocks, traits, and optional visuals, with no knowledge of token semantics or namespaces.
  - XStream owns token grammar, bucket structures, and high-level pipelines (fork/merge/gate) and uses RSB traits/utilities.

- Progressive Enhancement
  - RSB modules follow `<module>/{mod.rs,utils.rs,macros.rs,error.rs}`; macros stay thin; logic in helpers.
  - Optional visuals remain feature-gated and never exported via prelude by default.

- Testing
  - RSB: add focused unit tests + wrappers per `tests/features_*` and UATs for any visual demos (feature-gated).
  - XStream: keep ceremony drivers and integration tests; consider thin tests proving reuse of RSB visuals when enabled.

Concrete Plan (Phased)
- Phase 1: Align visuals and surface (low risk)
  1) XStream: replace local color getters with `rsb::visual::colors::{get_color,colorize,...}` guarded by a Cargo feature (e.g., `rsb-visuals`). Keep fallback (no-color) path.
  2) RSB: add a short section in FEATURES_COLORS.md about “consumers” usage patterns; no prelude changes.
  3) RSB: document `xcls::xsed` under strings features; add quick examples and tests demonstrating closure replacements and integration with `Stream`.

- Phase 2: Generic combinators and generators in RSB
  4) RSB: add `streams::Stream` combinators: `interleave`, `zip_lines`, `dedupe_any`, `chunk(n)` (MODULE_SPEC style; small + unit tests).
  5) RSB: add `src/gen/{mod.rs,utils.rs}` with simple line/text generators; add FEATURES_GEN.md; tests + UAT snippets.

- Phase 3: Adapter traits and error surfaces
  6) RSB: add `src/adapters/{mod.rs,traits.rs,error.rs}` with `FormatHandler<T>`, `RecoveryStrategy`, `AdapterError` (format-agnostic). No JSON/CSV code.
  7) XStream: implement `JsonHandler`, `CsvHandler` against RSB traits inside XStream; wire existing adapter APIs to these.

- Phase 4: Documentation and harmonization
  8) RSB: update docs index in HOWTO_UPDATE_RSB.md to reference new modules/features; keep prelude policy intact.
  9) XStream: update README/INTEGRATION to state dependency on RSB visuals/adapters (optional, feature-gated) and clarify boundaries.

Naming And API Notes
- Keep RSB names generic and string-first (`unique`, `dedupe_any`). In XStream, keep token terms (`MergeStrategy::Dedupe`), but expose aliases where it helps migration.
- Ensure macros stay thin; prefer module-owned macros. No token macros in RSB.

What Not To Move Into RSB
- TokenBucket/namespace parsing, token classification/validation.
- Fork/Merge/Gate algorithms that depend on namespaces.
- Ceremony drivers and token-colored visualizations.
- XStream pipeline/testing macros specialized for token semantics.

Checks And Tests
- RSB: run `cargo test` and feature suites; add wrappers under `tests/features_streams.rs` and `tests/features/gen/*` as needed.
- XStream: keep existing tests; add cases verifying no-color fallback and RSB-visuals path (when feature enabled).

Open Questions / Decisions To Confirm
- Should RSB expose any tiny “visual demo” helpers (formatting only) that XStream can compose? If yes, gate behind `visuals` and keep token-agnostic.
- Do we want a `rsb::streams::visualize()` no-op by default that XStream can decorate when visuals are enabled?

Quick Status Summary
- RSB already includes: stream core, streamable core, `xcls::xsed`, visuals framework (feature-gated), strong string/case utilities.
- XStream already leans on RSB patterns and should delegate colors to RSB to avoid duplication.

Action Checklist (Owner → Outcome)
- [RSB] Add stream combinators + tests (generic)
- [RSB] Add gen/ module + FEATURES_GEN.md + tests
- [RSB] Add adapters/ traits + AdapterError (no JSON/CSV)
- [RSB] Document xsed/xgrep under strings/xcls
- [XStream] Switch colors.rs usage to RSB visuals (feature-gated) or keep a minimal shim
- [XStream] Implement adapters via RSB traits; keep JSON/CSV logic here
- [XStream] Keep token semantics and ceremonies; add aliases where names differ from RSB

Notes For Contributors
- Follow HOWTO_UPDATE_RSB.md and MODULE_SPEC.md when touching RSB.
- Keep prelude minimal; feature-gated modules require explicit imports.
- Prefer small, verifiable steps; land tests with each step.

