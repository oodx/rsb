FUNCTION ANALYSIS — RSB ⇄ XStream

Date: 2025-09-13

Purpose
- Record what was reviewed, map function overlap, and create a manifest:
  - Existing functions in RSB to reuse (avoid dupes)
  - Planned (not yet implemented) items in RSB _todo
  - Additional candidates worth adding to RSB
- Identify items to remove or refactor out of XStream after migration to RSB.

Reviewed
- RSB
  - docs: HOWTO_UPDATE_RSB.md, MODULE_SPEC.md, FEATURES_* guides.
  - src: streams.rs, streamable/*, string/*, visual/*, xcls/*, macros/*, _todo/dev_token/*, _todo/dev_gx/*.
- XStream
  - README.md, RSB_INTEGRATION_STRATEGY.md, src/{xstream/*,adapter.rs,macros.rs,colors.rs}.

Summary (Overlap and Boundaries)
- RSB owns generic, token-agnostic primitives: Stream, Streamable, string helpers, optional visuals, random data, closure-enabled text ops.
- XStream owns token/namespace semantics: TokenBucket/types, fork/merge/gate strategies, visual ceremonies, token adapters.
- Duplication exists mainly around terminal colors and some generic generation patterns; we should centralize these in RSB.

Manifest — RSB Existing (Reusable)
- streams::Stream (line-oriented)
  - Sources: from_string, from_file(s), from_cmd, from_var, from_vec, from_delimited_string
  - Transforms: grep, sed, cut, head, tail, sort, uniq (consecutive), unique (global), filter, map
  - Case per-line: snake, kebab/slug, dot, space, camel, lower, upper
  - Block ops: sed_block, sed_lines, sed_around, sed_insert(Result), sed_template
  - Exec: pipe_to_cmd; Sinks: to_string, to_vec, to_file, append_to_file, to_var, tee, each, count, first, last

- streamable (generic, token-agnostic)
  - Macro: streamable!
  - Functions: Replace, UpperCase, LowerCase, Reverse, Trim, Length, Base64Encode, Base64Decode, UrlEncode, UrlDecode,
               Head, Tail, Grep, Sort, Unique, WordCount, Sed, SedLines, Pipeline (demo)

- xcls (closure variants)
  - xsed: replace, replace_with(closure), replace_regex, replace_regex_with(closure), transform_values, transform_keys, rsb_stream
  - xgrep (present): enhanced grep with closures (mapping/filtering/extract/count)

- string helpers
  - str_sub/try_str_sub_abs/try_str_sub_rel; str_prefix/str_suffix (glob-aware); str_replace; str_upper/lower;
  - str_case_first_match (glob-aware); is_name; str_equals; str_matches
  - case conversions exposed via module and stream methods

- visuals (feature-gated)
  - visual::colors runtime registry: color, get_color, bg, colorize, colorize_bg, color_enable(_with), color_mode, colored, get_all_colors
  - glyphs, prompts (optional)

- random/generation primitives
  - rand_alnum, rand_alpha, rand_hex, rand_string, rand_uuid, rand_range
  - gen_dict macro (test/data utilities)

Manifest — RSB Planned (in _todo, not implemented)
- dev_token (token substrate; keep token-agnostic wrt namespaces)
  - types.rs
    - TokenType, Token { value, token_type, position, length }, Position; TokenRules; ValidationError
  - parse.rs
    - tokenize, parse_delimited, parse_quoted, parse_key_value, tokenize_with_context
    - normalize_whitespace, split_preserve_quotes
  - validate.rs
    - is_valid_token(value, rules), is_identifier, is_literal, is_keyword, validate_token_format
  - format.rs
    - quote_token, escape_token, join_tokens, pad_token, format_token_table, highlight_token, format_token_with_type
  - transform.rs
    - normalize_token(style), transform_token_case(case_type), sanitize_token(rules), truncate_token, replace_token_chars,
      split_compound_token, merge_tokens; enums: NormalizationStyle, CaseType
  - helpers.rs
    - Bridges to string helpers (is_name, str_equals, str_matches), plus is_quoted, trim_token
  - macros.rs
    - token_validate!, is_valid_token!, tokenize!, parse_tokens!, transform_tokens!, normalize_tokens!,
      assert_token_type!, test_token_parsing!, format_tokens!, color_tokens!

- dev_gx (generators; structure only, no code yet)
  - plugins/{alnum,alpha,range,ids,dict/,dict/lists}
  - Intended: unify generators using existing rand_* primitives; add dictionary-backed words, ranges, ids, sequences.

Manifest — Suggested New (RSB, generic)
- streams::Stream combinators
  - interleave(other), zip_lines(other), chunk(n)
  - Note: unique(non-consecutive) already exists as unique(); keep uniq() for consecutive-dedup semantics

- gen module (rsb::gen)
  - Trait: Generator { next() -> String, take(n) -> Vec<String> }
  - Adapters backed by existing rand_* functions (alpha/alnum/hex/uuid/range)
  - Dictionary source: load from packaged lists when present; graceful fallback

- adapters traits (format-agnostic)
  - FormatHandler<T>: from_format(&str) -> Result<String, AdapterError>; to_format(&str) -> Result<String, AdapterError>; validate_format(&str)
  - RecoveryStrategy: FailFast | SkipErrors | DefaultValue(String) | Transform(Fn)
  - AdapterError (format-agnostic); no JSON/CSV code in RSB

No-Dupe Guidance (RSB implementation notes)
- Token validation/parsing should reuse string::helpers (is_name, str_matches) — do not reimplement.
- Token color/format helpers must call visual::colors (feature-gated); no hard-coded ANSI maps in RSB or XStream.
- Generators should wrap existing rand_* utilities; avoid parallel RNG utilities.

Items To Remove / Refactor From XStream After Migration
- colors.rs
  - Remove duplicated color constants (RESET, CHANNEL_COLORS, get_color, get_channel_color, get_channel_color_name).
  - Refactor coloring/visualization helpers to use `rsb::visual::colors::{get_color,colorize,...}` when the consumer enables visuals.
  - Keep token-specific displays (e.g., colorize_fork_display, colorize_merge_display), but source colors from RSB.

- adapter.rs
  - If RSB supplies adapters traits + AdapterError, delete XStream’s local AdapterError and FormatHandler-like constructs.
  - Implement RSB traits in XStream (JsonHandler, CsvHandler) and adapt XStreamAdapter to use them.
  - Keep token-specific validation (is_token_streamable) and pipeline builder; remove generic adapter scaffolding duplicated from RSB.

- xstream/xstream/gen.rs
  - Remove generic value-type and format-agnostic generators that overlap with RSB gen (alnum/alpha/range/uuid/common patterns).
  - Keep namespace- and color-aware token generators unique to XStream.

- Misc
  - Audit macros and helpers for generic functionality duplicated from RSB (e.g., basic pipeline demonstrations). Route them through RSB equivalents.

Considerations / Open Items
- Visual dependency: XStream should feature-gate RSB visuals (fallback to no-color output when visuals disabled).
- Error surfaces: decide whether XStream re-exports RSB adapter/stream errors or wraps them.
- Naming: maintain RSB generic terminology (unique/uniq), XStream can alias to its domain terms for migration ease.

Next Steps (optional implementation path)
- RSB
  - Add stream combinators + tests.
  - Introduce gen/ with baseline generators + tests; small FEATURES_GEN when module is complete.
  - Add adapters traits + AdapterError (no format impls).
  - Implement core of dev_token: TokenRules, validate_token_format, quote/escape/join/trim; small unit tests.
- XStream
  - Switch to RSB visuals; remove local color tables.
  - Implement adapter handlers via RSB traits; keep XStreamAdapter orchestration.
  - Trim generic generators; keep token/namespace-specific ones.

